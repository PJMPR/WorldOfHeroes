package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import dao.mappers.IMapResultSetIntoEntity;
import dao.repositories.IEquipmentRepository;
import dao.uow.IUnitOfWork;
import domain.model.Equipment;

public class EquipmentRepository extends RepositoryBase<Equipment> implements IEquipmentRepository {

	private PreparedStatement isEquiped;

	public EquipmentRepository(Connection connection, IMapResultSetIntoEntity<Equipment> mapper, IUnitOfWork uow) {
		super(connection, mapper, uow);
		try {
			isEquiped = connection.prepareStatement(isEquipedSql());
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	private String isEquipedSql() {
		return "SELECT * FROM equipment WHERE head IS NOT NULL AND shoulder IS NOT NULL AND back IS NOT NULL AND chest IS NOT NULL AND wrist IS NOT NULL AND hands IS NOT NULL AND waist IS NOT NULL AND legs IS NOT NULL AND feet IS NOT NULL AND weapon IS NOT NULL";
	}

	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE equipment(" + "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," + "head int,"
				+ "shoulder int," + "back int," + "chest int," + "wrist int," + "hands int," + "waist int,"
				+ "legs int," + "feet int," + "weapon int" + ")";
	}

	@Override
	protected String tableName() {
		return "equipment";
	}

	@Override
	protected String insertSql() {
		return "INSERT INTO equipment(head, shoulder, back, chest, wrist, hands, waist, legs, feet, weapon) VALUES (?,?,?,?,?,?,?,?,?,?)";
	}

	@Override
	protected String updateSql() {
		return "UPDATE equipment SET (head, shoulder, back, chest, wrist, hands, waist, legs, feet, weapon)=(?,?,?,?,?,?,?,?,?,?) WHERE id=?";
	}

	@Override
	protected void setUpdate(Equipment entity) throws SQLException {
		update.setInt(1, entity.getHead().getId());
		update.setInt(2, entity.getShoulder().getId());
		update.setInt(3, entity.getBack().getId());
		update.setInt(4, entity.getChest().getId());
		update.setInt(5, entity.getWrist().getId());
		update.setInt(6, entity.getHands().getId());
		update.setInt(7, entity.getWaist().getId());
		update.setInt(8, entity.getLegs().getId());
		update.setInt(9, entity.getFeet().getId());
		update.setInt(10, entity.getWeapon().getId());
	}

	@Override
	protected void setInsert(Equipment entity) throws SQLException {
		insert.setInt(1, entity.getHead().getId());
		insert.setInt(2, entity.getShoulder().getId());
		insert.setInt(3, entity.getBack().getId());
		insert.setInt(4, entity.getChest().getId());
		insert.setInt(5, entity.getWrist().getId());
		insert.setInt(6, entity.getHands().getId());
		insert.setInt(7, entity.getWaist().getId());
		insert.setInt(8, entity.getLegs().getId());
		insert.setInt(9, entity.getFeet().getId());
		insert.setInt(10, entity.getWeapon().getId());
	}

	public List<Equipment> withAllItemsEquiped() {
        List<Equipment> equipments = new ArrayList<Equipment>();
        try{
            ResultSet resultSet = isEquiped.executeQuery();
            while(resultSet.next()){
            	equipments.add(mapper.map(resultSet));
            }
        }catch (SQLException e){
            e.printStackTrace();
        }
        return equipments;
	}

}